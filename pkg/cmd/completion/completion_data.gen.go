// Code generated by go-bindata DO NOT EDIT.
// sources:
// completion.sh
package completion

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _completionSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3c\xfb\x73\xdc\x36\x73\xbf\xdf\x5f\xb1\xe1\xdd\x44\x92\x2d\xca\x52\x9a\x5f\x2a\xfb\x34\x49\xfc\x68\x3d\x4d\xe2\x8c\xd5\xb4\xd3\xaa\x1a\x0e\x8e\x5c\x1e\x11\xe1\x00\x16\x00\xef\x7c\x51\xf5\xbf\x77\x16\xe0\x9b\x3c\x59\xfa\xe2\x58\xce\xf7\x89\x33\x1e\xf1\xf0\x58\x2c\xf6\xbd\x4b\xc0\xd3\xaf\x9e\x2d\xb8\x7c\xb6\x60\x26\x9b\x4c\xa6\x10\x45\x49\xac\x4c\xf4\x22\x43\x91\xa3\x86\xb4\x90\xf1\x19\x35\xfb\xd6\x58\x70\x30\xc5\x22\x56\xab\x15\x93\xc9\xd9\x64\x52\x0e\x4f\x70\x51\x2c\xf7\x0f\xe0\x7a\x02\x00\xc0\x53\xb8\xb8\x80\x50\xc2\xec\xfa\xd5\xcb\x77\xe7\xd1\xcb\x77\x3f\xfd\x12\xbd\x7a\xfd\xc3\xaf\xff\x12\xbd\x79\xfb\xe3\xeb\x1b\xb8\xbc\x7c\x0e\x36\x43\xe9\x46\xd3\x83\x71\xa6\x20\x98\x5d\xbf\xf9\xf5\xe7\x97\x3f\x7f\xff\xd3\xeb\x8b\x93\xcb\x9b\x53\x98\x3d\x09\xe0\xec\x8c\xda\x47\xc1\x04\x6e\x7a\xca\x27\x37\x13\xc2\xfc\x65\x86\xf1\x95\xa1\xc5\x99\x04\xa6\x35\xdb\x82\x4a\x5b\xd8\x1a\x88\x95\xb4\x8c\x4b\x03\xac\xd5\x7c\x34\x99\x82\x61\x4b\x3c\xad\xb6\x5e\x8d\x8a\x9a\x31\xf0\x22\x5e\x25\x67\xf0\xc2\x41\x35\x91\x4a\x5b\x7d\xe6\x6c\x72\xcb\xc4\x9a\x26\x42\xc5\x4c\x80\x41\xbc\xe2\x72\x39\x9f\x9d\x3c\x07\x93\xf1\xd4\xb6\xfa\x34\x9a\xf9\x89\xdf\x92\xd2\x10\xaf\x92\xe7\x90\xa8\x9a\x42\x9e\xa6\xb3\x78\x95\xc0\x7c\x0e\xc1\xac\x84\x14\x0c\x69\x49\x0f\xc1\x3a\xee\xb4\x2c\x34\xb2\xab\xba\x25\xe5\xee\x35\x51\x12\x27\x7e\xbc\x2d\xb4\x84\x99\x46\x53\x52\xf3\x9c\xcb\x18\x21\x5a\xa2\x8d\x62\xb5\xca\xa3\x8d\xd2\x89\x89\x16\xdb\x48\x63\x0a\xdc\x80\x54\x16\xd8\x9a\x71\xc1\x16\x02\x81\x4b\xf8\xdd\x64\x93\x29\x6c\x10\x24\x62\x02\x0c\x72\xa5\x2d\x26\xb0\x46\x6d\xb8\x92\x60\x33\x66\x21\x66\x12\x16\x08\x46\x15\x3a\xc6\x04\x36\x19\x4a\x28\x0c\x97\x4b\x9a\x7d\x34\x69\xc9\xcd\x7f\x9f\xff\x6b\xf4\x1f\xaf\xdf\x9f\xbf\x7d\xf7\xf3\xe9\x53\x83\x96\x64\x06\xbe\xfe\x1a\xbe\x02\xbb\xcd\x77\xe2\x75\xf6\x2c\xc1\xf5\x33\x59\x08\x01\xdf\x9c\x7d\x7d\x52\x12\x66\xc7\xe0\x9a\x35\xf4\x6c\x32\x2e\x10\x2e\x60\x36\x85\x70\x69\xe1\x18\x2e\x3b\xd4\xaf\x9e\x98\x19\x84\x60\x76\x12\x00\x97\xc3\xce\x42\x1f\x0c\x1a\x5b\x9d\xf3\xd9\xb5\x13\xe1\xff\x7c\xf7\xfe\xd5\xf9\x85\x7b\x7d\x49\xef\x97\x37\x3b\x67\x3d\x7f\x3e\xe8\xca\x35\xae\x77\x2f\x43\xbd\xbb\xd6\x09\x4f\xee\xb7\x92\xa3\xd6\xee\xa5\x5c\xf7\x7c\x3f\xe8\xac\xf6\xdd\xe5\x4d\xb0\x7b\xca\xc8\x22\x31\x81\xb9\x85\x6c\xd4\x3d\x9f\x35\x9b\xb8\x0f\xec\x50\xee\x06\x3c\x05\x66\x4c\xb1\x42\xa8\x91\xff\xe1\xfd\xeb\xef\xff\xed\x9c\x64\x9b\x09\x8d\x2c\xd9\x82\x41\x0b\x86\x49\x14\xdb\x9d\x60\x1a\x25\xbe\x23\x4e\x68\x58\x3c\x68\xec\x42\x71\x5a\x79\x33\x49\xb9\x53\xc4\x57\x98\xb2\x42\x58\x58\x60\xc6\xd6\x5c\x69\xb0\x0a\x96\x68\x49\xb4\x41\xe2\x07\x0b\x95\xa9\x49\xb5\x5a\xb9\xd6\xb8\xd0\x1a\x65\xdd\x71\x04\x6f\xa5\x6f\x27\xe1\x55\x29\x84\x21\x19\x77\xa0\x39\x2b\xb6\x5d\x20\x28\x9b\xa1\x06\xc3\x6d\xc1\x2c\x57\xd2\x4c\xa6\xa4\xd0\x34\x25\x2d\x6c\xa1\xd1\x2b\xaf\xc9\x54\x21\x12\x40\x99\x10\xe4\x5c\x20\x8d\x3d\x04\x9b\x71\x53\xda\x0f\x03\x27\x87\x1e\xd8\x86\x1b\x84\xe3\xc9\x74\x32\x85\xef\x1d\x99\xc9\xe6\xce\x2a\x4c\xd7\x4c\x73\x67\x36\xf0\x03\x37\xd6\x54\x8b\xc5\x4c\x08\xb2\x05\x64\x47\x69\x63\x6e\xd5\x0d\x17\xa2\x32\xdc\x1e\x25\x55\xc8\xa4\x65\xbf\x7b\x4b\xdc\x0b\x38\x37\x6d\x82\x91\xf9\x52\x3a\x81\x05\xd2\x40\x5c\x33\x51\x30\x32\x61\x35\x61\xb9\xcc\x0b\x0b\xc6\x6a\xea\xdf\x77\x1b\xe7\x06\x12\x4c\xb9\xc4\x84\x16\x2a\x1d\xc1\x8a\x70\x35\xaa\xa4\x98\xdc\x23\xe6\x91\x45\xd4\x6a\x21\x70\x75\xd0\x38\x4d\xc7\xd9\xa8\xdc\x48\x94\x33\x6d\xb0\xb6\x4a\x95\x45\x0a\x66\x71\x00\xa1\xb0\xf4\x42\xe8\x05\x3d\xd3\xc4\xe7\xc1\xec\xda\xe9\xe2\x45\x7c\x59\xfa\x44\x68\x4c\x15\x1f\x98\x2a\xcf\xfe\xff\x0b\xb3\xa1\x72\x4c\xc9\xcd\x38\xe1\x20\x2d\x80\x54\xb0\xe5\x21\xc4\x6a\xa1\x19\x18\xab\x72\x03\x84\x22\x6d\x9e\xaf\x56\x98\x70\x66\x51\x6c\x69\xa3\x1b\xac\x3c\x48\x86\x1a\x07\x60\xcb\xbe\x93\x41\x47\x4f\x3f\xc2\x27\x07\xfd\xa6\x27\x43\x24\x4b\x72\xcd\x69\x6f\x43\xfd\x9a\x92\x0c\x70\x03\x98\xa6\x18\x5b\xbe\x26\x0c\x97\x42\x2d\xc8\xf9\xaa\x52\xa4\xd8\x16\xb8\x77\x46\xb1\x66\x1b\x01\x36\xd3\xaa\x58\x66\x8e\xc7\x4c\x2f\x8b\x15\x4a\x6b\x80\x79\xe1\xc8\xb5\x5a\x6a\xb6\x1a\x59\x48\xb2\x35\x5f\x32\x8b\xa6\x54\x15\x19\x5b\xe7\xe9\x34\xa2\x53\x2e\xa3\x08\x17\x27\xc0\x4c\x6c\xd8\xd6\x90\x18\xd4\x6a\x5b\x48\x32\x32\x4e\xe2\x46\x60\xb3\xd4\x52\xf4\xc5\x65\x42\xe4\xee\xeb\xfa\x21\x51\x9c\xcb\x58\x23\xa1\x4a\xab\x2c\x30\x55\x1a\xbd\x97\xa7\x19\xaa\xb0\xa4\xea\x34\x51\x28\x95\x0f\x56\xd8\xdf\x8f\x9f\x3e\x3d\x18\x12\xb7\x1b\x26\x8c\xf0\xa9\x63\xbf\xda\x50\xfa\xb1\xc4\x31\x05\x12\xa5\xa4\x67\x4c\x26\x02\x9d\x0f\xd6\x98\x8b\x6d\x2d\xe4\xed\xf0\x11\x82\xc6\xac\x18\x17\xfc\x4d\x5a\xd1\x11\x9f\x1f\x4f\x9a\xe0\xa8\x1e\x48\x5a\x17\xcc\xbe\x0b\x3a\x2a\x31\x85\x94\x0b\xa2\x1f\x51\xa1\x05\x94\x74\x2a\xce\x08\xd3\x3d\x0b\x2b\x66\xe3\xac\x63\x2f\x3b\xac\xa8\xe2\xad\x66\x25\x17\x76\xc5\x85\x0e\x9e\x8c\xc7\x5c\x53\x88\x29\x02\xa5\x99\x0e\x6a\x33\x53\xa5\x29\x6a\xb2\x10\x95\x52\x79\x39\x64\x71\x8c\x39\x09\x9a\xac\xa5\xae\xc4\x90\x1b\x58\x31\x7d\x85\x09\x2c\xb6\xd4\x3d\xef\x2d\xc4\x53\x30\xea\x90\xc2\xd8\x9c\xc5\x58\x85\x63\x2b\x26\x0b\x26\xc4\x16\x58\x92\x60\x02\xc6\x45\x70\x84\x4a\x61\x50\x3b\x9d\xf8\x90\x63\x4c\x16\xcd\x2a\x1a\x03\x69\xa1\x9d\xe5\x77\x76\xad\xb3\x44\x69\x3c\x9a\x3d\x8c\x06\x3c\x61\xf8\x64\x3e\xa2\xa0\xf4\x90\x57\x7d\xff\xfa\x97\x1f\xff\xeb\x82\x3f\x7d\x7a\x39\xef\x80\x1a\x9d\x30\xe2\x2a\xef\x0f\x1a\xee\x04\xbb\x23\xc2\xed\x48\xf8\xc6\xa5\x11\x4c\x08\xe3\xb5\xad\x15\xc7\x2f\xb6\xa0\x0a\xdd\xf6\x22\x6b\x94\x4e\xa8\x28\x7f\xf8\xf7\x77\xaf\xde\x9d\x36\x4c\x74\xe2\xee\x86\x31\xe9\xac\x3e\x5b\x88\x2d\x29\x3f\xad\x02\x2b\x52\x54\xfc\x90\x0b\x1e\x73\x2b\xb6\x34\x9d\x3c\x09\x2b\x9d\x98\xf7\x71\x42\xa8\x0d\x41\xa8\xbc\x99\xf1\xee\xac\xef\xcd\x4c\xac\x72\x6f\x6c\x98\x26\x91\xd3\x1a\x63\x7b\x3a\x99\x56\x86\xc2\x9c\x8e\x67\x42\xce\x77\xd5\x16\x2b\x53\x22\x31\xcd\xa4\xd3\x4a\x7e\xdd\xce\xad\x72\xab\x01\x97\x56\xf5\xf4\xb9\x81\xe8\x14\x7a\x52\x0b\x27\xab\x67\x6f\x98\x81\x25\x5f\xa3\x3c\x2c\xb5\xc3\xfb\x5d\xe7\x7a\x49\xee\x63\x5b\x30\x51\x8f\xa6\x7f\x6e\x31\x67\x89\x8d\x51\x31\xf7\x1e\xb8\xc4\xb4\x9d\x1d\x79\xcd\xbf\xae\xb6\xe4\x22\xcf\x5b\x33\xa6\x72\xe4\x8e\x8c\xa9\x6b\x89\xfa\x41\xc6\xa9\x83\x53\x1a\xa4\xea\x29\x53\xba\x46\x48\x48\x68\x2a\x6f\xde\xd3\x58\xb3\x61\x39\x84\x84\x73\xcd\x03\xc9\x88\xdd\xb4\x9b\xa8\x33\xb8\x01\x38\xaf\xb7\xf7\xec\x59\xf8\x2c\xba\x99\xdc\x82\x71\x25\x11\xc4\xa6\x86\xb3\xb3\x6b\xc1\x4c\x8d\xd3\x4d\x34\xbb\x6e\xa0\xdf\x74\x95\xa5\x8d\xfc\xfc\xd6\x79\x5d\x22\xb4\xc6\xcd\x67\x1d\x0a\x74\xc6\xf1\x14\x12\x8c\x05\x89\x69\x98\x42\xd0\x19\x19\xc0\x19\xd4\x99\xdb\x08\x6f\xe8\x99\xed\x24\x2e\x0a\x33\x0c\x39\xba\xc4\x99\x5d\xb7\x67\xdf\x40\xa2\xd0\x9b\x4c\xa7\x54\x5d\x3a\x94\x06\xa1\x7a\xbc\x37\xdb\x65\x2e\x2a\x85\xf0\x19\x6d\x94\x8b\x62\xc9\x65\xd4\x72\x39\xb5\xa7\x23\x3e\x27\x5c\xef\xf0\x57\xe6\x8a\xe7\x44\x22\x0f\xc0\xe1\x47\x3e\x2a\x63\x6b\xf4\xca\x54\x19\xb8\x84\x93\x86\x2b\xbd\xed\x89\x79\x98\xc0\x8c\xc0\xef\xf0\x4c\x26\x43\x21\xbc\x02\x26\xdc\x90\x41\x99\x9f\xbf\xfc\xe6\xf8\xdb\x6f\x7b\xe3\xca\x4e\x03\x1b\xa6\x25\x89\x13\x5b\x90\x0f\xf5\x39\x3a\x45\x23\x84\x3f\x6d\x85\x82\x0a\xd3\xa5\x9b\xa2\x78\xc5\xd7\x02\x66\xfb\x6e\x6c\x40\x28\xb9\xca\x52\x00\xa1\xcb\xdb\x53\x08\x39\xc9\x3d\x04\x4f\x8e\x4c\x16\x1c\x8c\x26\xd9\x5d\xde\x39\xd2\x7a\x9b\xdb\x38\x72\x17\x92\xcf\x68\xb9\xa1\xc5\xdf\xb1\xdb\x93\xe3\x7f\x3e\x1e\x19\x5b\xef\xb8\x35\xa9\xda\x7c\x65\xab\x62\x46\xcc\xf0\x46\xd9\x9b\x4e\xcf\xef\x01\xb8\x23\x08\x46\x90\xaa\x23\xa3\x51\x01\x72\x7b\x65\x85\xcd\x7a\xa5\x22\x0e\x1d\x3d\xe2\x29\x7c\x05\xb7\x25\x0e\x3d\xbe\xb7\xe4\x96\x12\xc9\x06\x6e\x65\x7f\xe6\xfb\x81\xe0\xc6\x86\xb9\x56\x6b\x9e\xa0\x36\x01\x04\x42\x2d\xb9\xf4\x7f\x55\x61\xcb\x44\xde\x4f\xa3\xb0\x85\xe6\xf8\xec\x21\x38\xa8\xb1\xba\x80\xf0\xf7\x8e\x75\xed\x21\x52\x85\x12\x85\x1e\xc9\x44\x46\x5c\xfc\x8e\x90\x91\x94\xd8\xe1\xe0\x0c\xfd\xc7\x32\x89\xfb\xc1\xed\xf8\x90\x3b\x07\xbf\x23\x14\xde\xe5\x1e\x5d\x28\x5c\x33\x3a\x72\x64\xfe\x4c\xec\x2e\xf9\x06\x15\xe3\x5c\x57\x10\x86\x39\x33\xc6\xd5\x56\x06\x2d\x21\x49\x70\xab\x59\xf3\x35\xb3\x18\x5e\xe1\xb6\xdd\xe8\x85\xa6\x69\xa1\x18\x93\x34\xbb\x6c\xf9\x54\xf2\x31\x16\x5f\x4e\xcb\x08\xde\x14\x79\xae\xb4\xf5\x11\x75\x1d\x7c\xb5\x8c\xe5\x16\x87\xa5\x99\x9e\x3d\xdf\x21\x3f\x7f\xa6\x64\xde\x55\xa0\x7a\x32\xc3\x8d\x8d\x6a\x5d\xfd\xbc\xc2\x53\xc9\x0e\xf1\xf9\x37\xa3\xe4\x27\xd3\xfe\x7f\x5c\xee\x0e\x0c\x82\x2a\xec\xc3\x30\xf5\x91\x97\x9f\x8c\x97\xb1\x28\x8c\x45\xfd\xf9\x1d\x39\xb3\x96\xc5\x59\x00\x41\xa9\xa6\x64\x2c\x02\x08\x34\xae\xd4\x1a\xdd\x0b\x99\xe6\x00\x02\x83\xb6\xc8\x1f\xfd\x7a\x1f\xf4\x1f\xf2\xeb\xd5\xc7\x3f\x27\xcc\x58\x09\x41\xe4\xd2\xbb\x9e\x28\xb8\xb6\xf9\xbe\xdf\x84\x2f\xf0\xbe\x7d\x73\x3e\x9f\xed\xfd\x8f\xdc\x03\x57\x0e\x0c\x35\x08\x2e\x91\xe2\x62\xe8\x40\x7a\x3a\xdf\x0f\x66\xd4\xe5\x83\x66\x89\xf0\x02\x5e\xec\xd3\xd2\xd5\x38\x20\xae\x43\x18\xfa\xbc\xf2\x9b\x56\x4a\xe5\xd7\x6b\xc0\x5c\x77\x20\xb7\xbe\xd9\x74\x23\xef\x37\x2e\x09\xae\xa0\x7b\xb0\x94\xe6\xbe\x7d\x45\xb1\xe2\x18\x94\x11\x62\x75\x18\xd2\x1a\xd9\x57\x9a\xc8\xcb\xf0\xa3\x0d\xec\x3c\x0f\x6f\x03\x77\xc1\x1d\x97\xf7\xbf\x51\xc9\x06\xc2\x40\xa2\xfc\x70\x31\x8e\x17\x45\x4c\x1e\x03\x9e\x3f\xcf\x49\x46\xde\x39\x3d\x20\x93\x85\x70\x7f\x0b\x59\x1f\x63\x78\x64\xf3\x6e\x36\x3f\x8c\x1d\xf0\x81\xcb\x5f\xdb\x29\xfc\x9d\xb1\xc4\x85\x90\x0f\xc3\x11\xd7\x13\x84\x61\xcc\xc2\x18\xb5\x35\x4d\xf5\x81\x4b\x83\x71\xa1\xb1\x6e\x68\x95\x22\xe8\x97\x0a\x5d\x65\xaf\xdd\xe0\x4b\xad\x8f\xf5\x90\x07\xb7\x2c\xf7\x95\x43\x25\x53\xbe\xfc\xfc\x39\x96\x41\x4a\xa9\x4c\xa6\x36\x01\x04\x85\xa4\x9f\x8f\x79\x14\xfc\x89\x79\x94\xe3\x73\x74\x85\xdb\x7e\x16\x45\x4d\xf3\x7d\xaf\x68\xb1\xd2\x78\xe4\x0b\x29\xb1\x89\xac\xba\xc2\x4a\xa5\x9b\x9e\x42\x8b\x76\xdb\x0a\x8d\x3b\xa3\xe3\xac\x59\xaf\x2f\x67\x4b\x2e\x59\xf3\x95\xda\xb7\x1a\x23\xa2\x35\x6a\x9e\x6e\xdb\xad\x96\xaf\x50\x15\xb6\x3b\x30\x8b\x48\xf1\xfb\x6d\xb9\x56\x1f\xb6\x11\xcf\xdb\xed\x1a\x49\x59\xb9\x5c\x76\xd6\xd7\x6a\x95\x5b\x5f\x20\xae\xda\xbd\xdd\x3d\x72\x19\xbc\x6f\xfa\x4d\x2d\x8e\x1a\xc4\xe9\x97\x41\xbd\xe6\x31\x46\xad\x41\x2b\xa6\x99\xcd\x94\x6c\x8d\xcc\x59\x7c\xc5\x96\x78\x14\x2b\xb3\x6a\xd3\xe5\x60\x84\x39\x1d\x01\x20\x8a\xf7\xd3\x36\xcf\x1e\x83\x7f\xf1\xb2\xd5\x03\x7a\xe7\x46\xc0\xff\xb0\x6f\x2e\x99\x91\xa9\xcd\x23\x37\xbe\x14\x6e\x38\x1f\xf1\xc8\x8e\x07\x67\x87\x0f\xf4\x1e\xa0\x28\x9b\x24\x83\x52\xec\x63\xc4\x70\x77\x06\x7e\x3c\x62\x68\xb1\x37\x62\x49\xf2\x70\xb5\x84\x22\x4f\x98\xfd\x74\xe5\x83\x2f\xa6\x56\x53\xd2\xf6\x61\xab\x71\x9f\xb4\x00\xf7\xa5\x91\xf6\x21\xab\x60\x5f\x3c\x4d\x07\x23\xfc\x36\x3c\xe9\xea\xef\x28\xed\xe7\xa3\xdf\x54\x4a\xb2\xf3\xe4\xb6\x0f\x2a\xe5\x29\xac\xf2\x7b\xca\xff\x16\x1c\xed\xc8\xf7\x94\xf6\x53\xa2\xe4\xbf\xae\x34\x6b\xec\xb8\x0e\x73\x0b\x79\x4a\x40\x7f\xc4\x6e\x56\x22\x36\x14\xaa\xf9\xc9\x67\xf0\x7a\x85\xcd\x82\x3a\x6b\xa1\x37\xe7\xc9\x9b\x6f\x93\x65\xdd\xe5\x16\x4f\x48\x4a\x5f\x5e\x1b\xab\x64\xb4\xcd\xf8\xa8\x59\xed\xa0\x8b\x43\x59\xe7\x88\x12\xae\x5d\xe7\xe4\x3e\x22\x51\x41\xbd\xb3\x5c\xd4\x07\x39\x87\xa2\xd1\x81\x75\xdd\x5b\xe0\x23\xdf\xdb\xca\x45\xaa\xd1\x01\xec\x80\x70\xc7\xdd\xf5\xc8\x72\x9f\xdd\x95\xf3\x42\x9a\x37\xb2\xc9\x2e\xf2\xbf\xd4\x68\xf7\x8f\x2a\x72\x2c\x3f\x17\x76\x31\x19\x7c\x30\xdc\x79\x86\x72\xe7\x64\x37\x7b\x0a\x52\xb5\x0f\xe1\x56\xa7\x8d\xcb\x48\x12\x90\xbb\x33\xee\x4e\xc6\x40\xe9\xf6\x31\xe8\x4f\x63\xfe\xc6\x4b\x72\xfe\x48\xf8\x48\x61\xae\x45\x21\xcd\x97\x99\x05\xa9\x36\x23\xf3\xdd\x31\x43\x77\x4e\x55\x20\x5b\xa3\xbb\xca\xe0\xae\xa3\x28\x8b\xd2\x72\xd2\x1a\xa5\x21\x41\x8b\xb1\x75\x87\x33\xdd\xfe\xdc\x89\x45\xcb\xae\x10\xd6\x4c\x14\x68\x60\x51\x58\x77\x34\xdc\x60\xce\xb4\x3b\x4b\x2d\xf8\xd5\xf0\xe0\xe2\x14\xc2\xd0\x61\xe7\xa6\x01\x97\xc6\x92\x20\xb9\xcb\x62\xd4\x3e\x77\xed\x23\xd3\x36\xb8\xa7\xd1\x1d\xa5\xdd\x28\xad\xb7\xcd\x91\xd1\xaa\x08\xd9\xab\x3f\x82\xcd\xdc\x55\x1b\xa3\x80\xdb\x3d\x03\x86\xa5\x08\x56\x01\x5f\x4a\x55\x5e\x34\x1b\xac\x72\xb7\x12\x25\x99\x8e\x21\x23\x1e\xbe\xbc\x39\x42\x34\xa9\x86\xe7\xe3\x89\x22\x4e\xf5\x88\x78\xb9\x32\x86\x2f\x04\x0e\x84\xb5\x0b\x87\x4b\xd2\x77\x01\x85\x61\x4b\x3c\x6c\xee\xd7\x95\x57\x8e\x8c\x72\x97\xf5\x8a\xbc\xbc\xd1\xd6\xbe\xde\x54\x2e\x6a\x55\xfb\xac\xff\xa1\x63\xa4\x29\x34\x8e\x96\x8a\xa7\x90\xa9\x0d\x6c\x10\x36\x4c\x5a\x9a\xea\x49\x33\xce\xb4\x07\x4f\x0e\x9a\xab\x78\x3b\x6e\x1b\xcd\xbe\xab\x2d\xc8\x8e\xe3\xd1\xff\xf4\x6d\xd9\x5f\x36\x42\x21\x0b\x83\xad\xfb\x8b\xe5\x41\xe1\x43\x77\xed\x16\xb8\xa9\x06\xd4\xb7\xe0\x4a\xd7\x54\x68\x3f\xc2\x5d\xd3\xf3\x77\x5a\x3b\x07\xe7\xcb\x65\x88\x27\x9d\x76\xc7\x1c\xad\x94\xa5\xe9\x29\xff\xe0\x61\xb6\x4f\xdc\x07\x6e\x4b\xe5\x46\xea\x9b\x31\xb5\xf3\x9b\xf6\x6e\x7a\x74\xef\x44\x2e\x98\xc9\x5a\x86\x1e\xca\xfa\x60\x79\x09\xe9\x2d\x2c\x50\x70\x5c\x23\xac\x0a\x63\x4b\x70\x0b\x6f\x1c\x98\x10\x98\xd4\x46\x45\x6c\xfd\x81\x6c\xf7\x7f\x08\x38\x42\x8f\xdf\xb8\x0e\x25\x04\xf3\xd3\x60\x94\x1e\x93\x11\x0e\x9d\x5b\xe6\x2a\xa4\x9d\xbb\x54\x12\xf6\xc8\x12\xef\x95\x67\xc0\xcb\xab\x8f\x4f\x6a\x7f\xe0\x20\x90\x04\xd4\x1e\x20\x54\x0e\xb3\x32\xc2\xa1\x9f\xad\x57\xa9\xfc\x1d\xaa\xf0\x4d\xe7\xf6\xa6\x03\xf2\xff\x01\x00\x00\xff\xff\xf0\x42\x47\x6d\x1b\x41\x00\x00")

func completionShBytes() ([]byte, error) {
	return bindataRead(
		_completionSh,
		"completion.sh",
	)
}

func completionSh() (*asset, error) {
	bytes, err := completionShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"completion.sh": completionSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"completion.sh": &bintree{completionSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

