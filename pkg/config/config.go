package config

import (
	"bytes"
	"crypto/x509"
	"errors"
	"io/ioutil"
)

// Config for the DC/OS CLI.
type Config struct {
	// The public master URL of the DC/OS cluster.
	URL string

	// The token generated by authenticating to DC/OS using the Admin Router Access Control Service.
	ACSToken string

	// TLS holds the configuration for TLS clients.
	TLS TLS

	// The request timeout in seconds once the connection is established.
	Timeout int

	// Whether to use a different default username for node SSH access.
	SSHUser string

	// Whether to use a fixed ssh proxy host (Bastion) for node SSH access.
	SSHProxyIP string

	// Whether to paginate the output of the commands.
	Pagination bool

	// Whether to report usage events to Mesosphere.
	Reporting bool

	// The Mesos master URL. Must be set in format "http://host:port".
	MesosMasterURL string

	// Whether to prompt the user to log in when token expired.
	// If set to `false`, otherwise automatically initiate login.
	PrompLogin bool

	// Custom name for the cluster.
	// If not set it defaults to what is returned by the /mesos/state-summary endpoint.
	ClusterName string

	// The Store associated to the Config.
	store *Store

	// Path to the config file.
	path string
}

// TLS holds the configuration for TLS clients.
type TLS struct {
	// Insecure specifies if server certificates should be accepted without verification.
	//
	// Skipping verification against the system's CA bundle or a cluster-specific CA is highly discouraged
	// and should only be done during testing/development.
	Insecure bool

	// Path to the root CA bundle.
	RootCAsPath string

	// A pool of root CAs to verify server certificates against.
	RootCAs *x509.CertPool
}

// Store returns the config Store.
func (conf *Config) Store() *Store {
	return conf.store
}

// Save writes the config to the path specified in the Config.Path field.
func (conf *Config) Save() error {
	if conf.path == "" {
		return errors.New("cannot save config: no path specified")
	}
	var buf bytes.Buffer
	if _, err := conf.store.tree.WriteTo(&buf); err != nil {
		return err
	}
	return ioutil.WriteFile(conf.path, buf.Bytes(), 0600)
}

// DefaultConfig returns the default configuration for the DC/OS CLI.
// All config defaults are their zero value except for the timeout which is 180 seconds.
func DefaultConfig() Config {
	return Config{
		Timeout: 180,
	}
}
